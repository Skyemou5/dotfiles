# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=-1
HISTFILESIZE=-1

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color|xterm-kitty) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	#alias ls='ls --color=auto'
    alias dir='dir --color=auto'
    alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#path extensions
PATH="$HOME/Apps:$PATH"
PATH="$HOME/.local/bin:$PATH"
PATH="$HOME/Apps/forgit/bin:$PATH"
PATH="/usr/local/go/bin:$PATH"

export PATH

#environment variables
export PAGER='/usr/bin/less'

#custom shell options
s_opts=\
(autocd \
cdable_vars \
direxpand \
expand_aliases \
extglob \
extquote \
histappend \
checkwinsize \
globstar)

for s_opt in ${s_opts[@]}; do
	shopt -s "$s_opt"
done

#custom aliases...

alias open='xdg-open'
alias off='shutdown -h now'
alias nano='nano -lP'
alias update='sudo apt update && sudo apt upgrade -y'
alias screenlock='xdg-screensaver lock'
alias mirror='rsync -az --delete --stats'
alias mirror-dry='rsync -azn --delete --stats'
alias lock='xdg-screensaver lock'
alias veracrypt='veracrypt -t'
alias gte='gnome-text-editor'
alias chime='aplay /usr/share/sounds/speech-dispatcher/xylofon.wav &>/dev/null'
alias text='gnome-text-editor'
alias zsh='SHELL=/usr/bin/zsh; zsh'
alias p='pushd'
alias fzf='fzf-tmux -p 65%,75% -m'
alias nnn='nnn -AHx'
alias toss='trash-put'
alias less='less -N'
alias dust='dust -r'
alias lsfuse='duf -all -only-fs fuse.pathfs.pathInode'
alias howdoi='howdoi --color'
alias tldr='tldr -t ocean'

#arbitrary functions
function surface()
{
	file=$(mktemp)
	local line
    while IFS= read -r line; do
        echo "$line" >> "$file"
    done

	gnome-text-editor "$file"
	exit 0
}

function extract-sentences()
{ 
	sd "\. " ".\n"
}

function manswitch()
{ 
	man $1 | less -p "^ +$2"
}

#sources
source /usr/share/fzf/shell/key-bindings.bash
#source /usr/share/autojump/autojump.bash
#source /home/mara/.completions/*
source ~/.local/share/bash-completion/completions/*
source ~/.config/sources/fzf-git.sh
source ~/Apps/forgit/forgit.plugin.sh

#fff
f() {
    fff "$@"
    cd "$(cat "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")"
}

export FFF_HIDDEN=1

#bat
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANROFFOPT="-c"

#fzf

#fzf sources
#source /home/mara/Downloads/fzf-tmux

export FZF_DEFAULT_OPTS="
-m --height 100%
--preview 'bat -n --color=always {}'
--preview-window hidden
--bind 'ctrl-y:execute-silent(printf {} | cut -f 2- | xclip -r -sel c)'
--bind 'ctrl-p:toggle-preview'
--bind 'alt-l:clear-query'
--bind 'alt-c:clear-selection'
--bind 'alt-a:toggle-all'
"

# Preview file content using bat (https://github.com/sharkdp/bat)
export FZF_CTRL_T_OPTS="
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"

export FZF_TMUX_OPTS='-p80%,60%'

# Setting fd as the default source for fzf
export FZF_DEFAULT_COMMAND='fd --type f --strip-cwd-prefix'

# To apply the command to CTRL-T as well
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

#tmux split pane for fzf
export FZF_TMUX=1

_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}

#starship stuff
#eval "$(starship init bash)"

#nnn (TUI file manager)
export NNN_FIFO=/tmp/nnn.fifo
export NNN_PLUG='t:preview-tui;p:preview-tabbed;x:!| tmsu tags "$nnn";q:hard-quit'
#export NNN_PLUG='t:preview-tui;p:preview-tabbed;x:tmsu-tag-plug'
export NNN_ICONLOOKUP=1

function n ()
{
    # Block nesting of nnn in subshells
    [ "${NNNLVL:-0}" -eq 0 ] || {
        echo "nnn is already running"
        return
    }

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #      NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # The command builtin allows one to alias nnn to n, if desired, without
    # making an infinitely recursive alias

	#take ad-hoc args for 'n', but also incorporate defaults (as one would with an alias)

	ext_args=("${@}")
	ext_args+=(-A)
	ext_args+=(-H)
	ext_args+=(-x)

    command nnn "$ext_args"

    [ ! -f "$NNN_TMPFILE" ] || {
        . "$NNN_TMPFILE"
        rm -f "$NNN_TMPFILE" > /dev/null
    }
}

nnn_cd()
{
    if ! [ -z "$NNN_PIPE" ]; then
        printf "%s\0" "0c${PWD}" > "${NNN_PIPE}" !&
    fi
}

trap nnn_cd EXIT

#ripgrep / rg
RIPGREP_CONFIG_PATH="$HOME/.config/rg/rg.conf"

#zoxide
eval "$(zoxide init bash)"

#broot
source $HOME/.config/broot/launcher/bash/br

#lsd

#function ls {
#	args="$@"
#    if [[ -z "$args" ]]; then
#        args="-1"
#    elif [[ "$args" == "-s" ]]; then
#    	command lsd
#    	return
#    fi
#
#    command lsd "$args"
#}

alias ls='lsd -1'
#alias l='ls -l'
#alias la='ls -a'
#alias lla='ls -la'
alias lt='lsd --tree'

#walk
function lk {
  cd "$(walk "$@")"
}

#rustup
source "$HOME/.cargo/env"

#atuin stuff
[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh

#choose ONE eval below

# normal Bind - borth ctrl-r AND up arrow
#eval "$(atuin init bash)"

# Bind ctrl-r but not up arrow
#eval "$(atuin init bash --disable-up-arrow)"

# Bind up-arrow but not ctrl-r
eval "$(atuin init bash --disable-ctrl-r)"

# Bind ctrl-g to navi as a widget
eval "$(navi widget bash)"

#cheat
export CHEAT_USE_FZF=true

#starship prompt
eval "$(starship init bash)"
